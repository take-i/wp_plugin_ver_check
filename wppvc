#!/usr/bin/env php
<?php

// Check for -h and -c flags
$options = getopt("hc");
if (isset($options['h'])) {
    echo "Usage: script.php [-h] [-c]\n";
    echo "  -h  Show help information\n";
    echo "  -c Perform version check and update check\n";
    exit(0);
}

// If -c flag is not set, exit the script
if (!isset($options['c'])) {
    exit(0);
}

// Execute `wp plugin list` and get the result
exec('wp plugin list --format=json', $output, $return_var);

// If the command fails, print an error and exit
if ($return_var !== 0) {
    echo "Error: Unable to execute `wp plugin list`.\n";
    exit(1);
}

// Join the output lines and decode the JSON into an array
$plugins = json_decode(implode("\n", $output), true);

// If the decoding fails, print an error and exit
if ($plugins === null) {
    echo "Error: Unable to decode the output of `wp plugin list`.\n";
    exit(1);
}

echo "| No. | 更新対象 | name | status | update | version | 最新Ver | WP Tested | PHP ver | WP公式 | WP公式URL | 備考 |\n";
echo "| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n";

$counter = 1;
foreach ($plugins as $plugin) {
    // Fetch plugin details from WordPress API
    $response = @file_get_contents("https://api.wordpress.org/plugins/info/1.0/{$plugin['name']}.json");

    // If the API request fails, print the plugin info without an error message and continue with the next plugin
    if ($response === false) {
        echo "| {$counter} | ー | {$plugin['name']} | {$plugin['status']} | {$plugin['update']} | {$plugin['version']} | ー | ー | ー | ー | 公式なし | ー |\n";
        $counter++;
        continue;
    }

    // Decode the JSON response into an associative array
    $pluginDetails = json_decode($response, true);

    // If the decoding fails or the plugin is not found, print the plugin info without an error message and continue with the next plugin
    if ($pluginDetails === null || isset($pluginDetails['error'])) {
        echo "| {$counter} | ー | {$plugin['name']} | {$plugin['status']} | {$plugin['update']} | {$plugin['version']} | ー | ー | ー | ー | 公式なし | ー |\n";
        $counter++;
        continue;
    }

    // Compare current version with latest version
    $updateTarget = version_compare($plugin['version'], $pluginDetails['version'], '<') ? 'レ' : ' ー ';

    // Prepare the output line
    $line = "| {$counter} | {$updateTarget} | {$plugin['name']} | {$plugin['status']} | {$plugin['update']} | {$plugin['version']} | ";
    $line .= "{$pluginDetails['version']} | {$pluginDetails['tested']} | {$pluginDetails['requires_php']} | ";
    $line .= "[{$pluginDetails['name']}]({$pluginDetails['homepage']}) | ー | ー |\n";

    // Print the line
    echo $line;
    $counter++;
}